// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AdminOptionPack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Models {

void protobuf_ShutdownFile_AdminOptionPack_2eproto() {
  delete AdminOptionRequestPack::default_instance_;
  delete AdminOptionReplyPack::default_instance_;
}

void protobuf_AddDesc_AdminOptionPack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  AdminOptionRequestPack::default_instance_ = new AdminOptionRequestPack();
  AdminOptionReplyPack::default_instance_ = new AdminOptionReplyPack();
  AdminOptionRequestPack::default_instance_->InitAsDefaultInstance();
  AdminOptionReplyPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AdminOptionPack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AdminOptionPack_2eproto {
  StaticDescriptorInitializer_AdminOptionPack_2eproto() {
    protobuf_AddDesc_AdminOptionPack_2eproto();
  }
} static_descriptor_initializer_AdminOptionPack_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AdminOptionRequestPack::kClientIdFieldNumber;
const int AdminOptionRequestPack::kTypeFieldNumber;
const int AdminOptionRequestPack::kServerAddressFieldNumber;
const int AdminOptionRequestPack::kNewAdminNameFieldNumber;
const int AdminOptionRequestPack::kOldAdminPwdEncFieldNumber;
const int AdminOptionRequestPack::kNewAdminPwdEncFieldNumber;
#endif  // !_MSC_VER

AdminOptionRequestPack::AdminOptionRequestPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AdminOptionRequestPack::InitAsDefaultInstance() {
}

AdminOptionRequestPack::AdminOptionRequestPack(const AdminOptionRequestPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AdminOptionRequestPack::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0;
  type_ = 0;
  server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_admin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_admin_pwd_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_admin_pwd_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminOptionRequestPack::~AdminOptionRequestPack() {
  SharedDtor();
}

void AdminOptionRequestPack::SharedDtor() {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    delete server_address_;
  }
  if (new_admin_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_admin_name_;
  }
  if (old_admin_pwd_enc_ != &::google::protobuf::internal::kEmptyString) {
    delete old_admin_pwd_enc_;
  }
  if (new_admin_pwd_enc_ != &::google::protobuf::internal::kEmptyString) {
    delete new_admin_pwd_enc_;
  }
  if (this != default_instance_) {
  }
}

void AdminOptionRequestPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminOptionRequestPack& AdminOptionRequestPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdminOptionPack_2eproto();  return *default_instance_;
}

AdminOptionRequestPack* AdminOptionRequestPack::default_instance_ = NULL;

AdminOptionRequestPack* AdminOptionRequestPack::New() const {
  return new AdminOptionRequestPack;
}

void AdminOptionRequestPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0;
    type_ = 0;
    if (has_server_address()) {
      if (server_address_ != &::google::protobuf::internal::kEmptyString) {
        server_address_->clear();
      }
    }
    if (has_new_admin_name()) {
      if (new_admin_name_ != &::google::protobuf::internal::kEmptyString) {
        new_admin_name_->clear();
      }
    }
    if (has_old_admin_pwd_enc()) {
      if (old_admin_pwd_enc_ != &::google::protobuf::internal::kEmptyString) {
        old_admin_pwd_enc_->clear();
      }
    }
    if (has_new_admin_pwd_enc()) {
      if (new_admin_pwd_enc_ != &::google::protobuf::internal::kEmptyString) {
        new_admin_pwd_enc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AdminOptionRequestPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_address;
        break;
      }
      
      // optional string server_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_admin_name;
        break;
      }
      
      // optional string new_admin_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_admin_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_admin_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_admin_pwd_enc;
        break;
      }
      
      // optional string old_admin_pwd_enc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_admin_pwd_enc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_admin_pwd_enc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_new_admin_pwd_enc;
        break;
      }
      
      // optional string new_admin_pwd_enc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_admin_pwd_enc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_admin_pwd_enc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminOptionRequestPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientid(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional string server_address = 3;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_address(), output);
  }
  
  // optional string new_admin_name = 4;
  if (has_new_admin_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_admin_name(), output);
  }
  
  // optional string old_admin_pwd_enc = 5;
  if (has_old_admin_pwd_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->old_admin_pwd_enc(), output);
  }
  
  // optional string new_admin_pwd_enc = 6;
  if (has_new_admin_pwd_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->new_admin_pwd_enc(), output);
  }
  
}

int AdminOptionRequestPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string server_address = 3;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_address());
    }
    
    // optional string new_admin_name = 4;
    if (has_new_admin_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_admin_name());
    }
    
    // optional string old_admin_pwd_enc = 5;
    if (has_old_admin_pwd_enc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_admin_pwd_enc());
    }
    
    // optional string new_admin_pwd_enc = 6;
    if (has_new_admin_pwd_enc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_admin_pwd_enc());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminOptionRequestPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminOptionRequestPack*>(&from));
}

void AdminOptionRequestPack::MergeFrom(const AdminOptionRequestPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
    if (from.has_new_admin_name()) {
      set_new_admin_name(from.new_admin_name());
    }
    if (from.has_old_admin_pwd_enc()) {
      set_old_admin_pwd_enc(from.old_admin_pwd_enc());
    }
    if (from.has_new_admin_pwd_enc()) {
      set_new_admin_pwd_enc(from.new_admin_pwd_enc());
    }
  }
}

void AdminOptionRequestPack::CopyFrom(const AdminOptionRequestPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminOptionRequestPack::IsInitialized() const {
  
  return true;
}

void AdminOptionRequestPack::Swap(AdminOptionRequestPack* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(type_, other->type_);
    std::swap(server_address_, other->server_address_);
    std::swap(new_admin_name_, other->new_admin_name_);
    std::swap(old_admin_pwd_enc_, other->old_admin_pwd_enc_);
    std::swap(new_admin_pwd_enc_, other->new_admin_pwd_enc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AdminOptionRequestPack::GetTypeName() const {
  return "Models.AdminOptionRequestPack";
}


// ===================================================================

#ifndef _MSC_VER
const int AdminOptionReplyPack::kTypeFieldNumber;
const int AdminOptionReplyPack::kResultFieldNumber;
const int AdminOptionReplyPack::kServerAddressFieldNumber;
const int AdminOptionReplyPack::kNewAdminNameFieldNumber;
#endif  // !_MSC_VER

AdminOptionReplyPack::AdminOptionReplyPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AdminOptionReplyPack::InitAsDefaultInstance() {
}

AdminOptionReplyPack::AdminOptionReplyPack(const AdminOptionReplyPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AdminOptionReplyPack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  result_ = 0;
  server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_admin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminOptionReplyPack::~AdminOptionReplyPack() {
  SharedDtor();
}

void AdminOptionReplyPack::SharedDtor() {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    delete server_address_;
  }
  if (new_admin_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_admin_name_;
  }
  if (this != default_instance_) {
  }
}

void AdminOptionReplyPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminOptionReplyPack& AdminOptionReplyPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdminOptionPack_2eproto();  return *default_instance_;
}

AdminOptionReplyPack* AdminOptionReplyPack::default_instance_ = NULL;

AdminOptionReplyPack* AdminOptionReplyPack::New() const {
  return new AdminOptionReplyPack;
}

void AdminOptionReplyPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    result_ = 0;
    if (has_server_address()) {
      if (server_address_ != &::google::protobuf::internal::kEmptyString) {
        server_address_->clear();
      }
    }
    if (has_new_admin_name()) {
      if (new_admin_name_ != &::google::protobuf::internal::kEmptyString) {
        new_admin_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AdminOptionReplyPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_address;
        break;
      }
      
      // optional string server_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_admin_name;
        break;
      }
      
      // optional string new_admin_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_admin_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_admin_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminOptionReplyPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string server_address = 3;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_address(), output);
  }
  
  // optional string new_admin_name = 4;
  if (has_new_admin_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_admin_name(), output);
  }
  
}

int AdminOptionReplyPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string server_address = 3;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_address());
    }
    
    // optional string new_admin_name = 4;
    if (has_new_admin_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_admin_name());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminOptionReplyPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminOptionReplyPack*>(&from));
}

void AdminOptionReplyPack::MergeFrom(const AdminOptionReplyPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
    if (from.has_new_admin_name()) {
      set_new_admin_name(from.new_admin_name());
    }
  }
}

void AdminOptionReplyPack::CopyFrom(const AdminOptionReplyPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminOptionReplyPack::IsInitialized() const {
  
  return true;
}

void AdminOptionReplyPack::Swap(AdminOptionReplyPack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(server_address_, other->server_address_);
    std::swap(new_admin_name_, other->new_admin_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AdminOptionReplyPack::GetTypeName() const {
  return "Models.AdminOptionReplyPack";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models

// @@protoc_insertion_point(global_scope)
