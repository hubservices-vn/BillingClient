// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CCHandshakePack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Models {

void protobuf_ShutdownFile_CCHandshakePack_2eproto() {
  delete CCHandshakePack::default_instance_;
  delete CCHandshakeAckPack::default_instance_;
}

void protobuf_AddDesc_CCHandshakePack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  CCHandshakePack::default_instance_ = new CCHandshakePack();
  CCHandshakeAckPack::default_instance_ = new CCHandshakeAckPack();
  CCHandshakePack::default_instance_->InitAsDefaultInstance();
  CCHandshakeAckPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CCHandshakePack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CCHandshakePack_2eproto {
  StaticDescriptorInitializer_CCHandshakePack_2eproto() {
    protobuf_AddDesc_CCHandshakePack_2eproto();
  }
} static_descriptor_initializer_CCHandshakePack_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CCHandshakePack::kVerFieldNumber;
const int CCHandshakePack::kTimestampFieldNumber;
#endif  // !_MSC_VER

CCHandshakePack::CCHandshakePack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CCHandshakePack::InitAsDefaultInstance() {
}

CCHandshakePack::CCHandshakePack(const CCHandshakePack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CCHandshakePack::SharedCtor() {
  _cached_size_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCHandshakePack::~CCHandshakePack() {
  SharedDtor();
}

void CCHandshakePack::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::kEmptyString) {
    delete ver_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void CCHandshakePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CCHandshakePack& CCHandshakePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CCHandshakePack_2eproto();  return *default_instance_;
}

CCHandshakePack* CCHandshakePack::default_instance_ = NULL;

CCHandshakePack* CCHandshakePack::New() const {
  return new CCHandshakePack;
}

void CCHandshakePack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::kEmptyString) {
        ver_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CCHandshakePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional string timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCHandshakePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ver(), output);
  }
  
  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(), output);
  }
  
}

int CCHandshakePack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }
    
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCHandshakePack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CCHandshakePack*>(&from));
}

void CCHandshakePack::MergeFrom(const CCHandshakePack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void CCHandshakePack::CopyFrom(const CCHandshakePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCHandshakePack::IsInitialized() const {
  
  return true;
}

void CCHandshakePack::Swap(CCHandshakePack* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CCHandshakePack::GetTypeName() const {
  return "Models.CCHandshakePack";
}


// ===================================================================

#ifndef _MSC_VER
const int CCHandshakeAckPack::kClientIdFieldNumber;
#endif  // !_MSC_VER

CCHandshakeAckPack::CCHandshakeAckPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CCHandshakeAckPack::InitAsDefaultInstance() {
}

CCHandshakeAckPack::CCHandshakeAckPack(const CCHandshakeAckPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CCHandshakeAckPack::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCHandshakeAckPack::~CCHandshakeAckPack() {
  SharedDtor();
}

void CCHandshakeAckPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCHandshakeAckPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CCHandshakeAckPack& CCHandshakeAckPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CCHandshakePack_2eproto();  return *default_instance_;
}

CCHandshakeAckPack* CCHandshakeAckPack::default_instance_ = NULL;

CCHandshakeAckPack* CCHandshakeAckPack::New() const {
  return new CCHandshakeAckPack;
}

void CCHandshakeAckPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CCHandshakeAckPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCHandshakeAckPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }
  
}

int CCHandshakeAckPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCHandshakeAckPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CCHandshakeAckPack*>(&from));
}

void CCHandshakeAckPack::MergeFrom(const CCHandshakeAckPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
}

void CCHandshakeAckPack::CopyFrom(const CCHandshakeAckPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCHandshakeAckPack::IsInitialized() const {
  
  return true;
}

void CCHandshakeAckPack::Swap(CCHandshakeAckPack* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CCHandshakeAckPack::GetTypeName() const {
  return "Models.CCHandshakeAckPack";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models

// @@protoc_insertion_point(global_scope)
