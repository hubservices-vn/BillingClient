// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkStatePack.proto

#ifndef PROTOBUF_NetworkStatePack_2eproto__INCLUDED
#define PROTOBUF_NetworkStatePack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Models {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NetworkStatePack_2eproto();
void protobuf_AssignDesc_NetworkStatePack_2eproto();
void protobuf_ShutdownFile_NetworkStatePack_2eproto();

class NetworkStatePack;
class NetworkStateReplyPack;

// ===================================================================

class NetworkStatePack : public ::google::protobuf::MessageLite {
 public:
  NetworkStatePack();
  virtual ~NetworkStatePack();
  
  NetworkStatePack(const NetworkStatePack& from);
  
  inline NetworkStatePack& operator=(const NetworkStatePack& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const NetworkStatePack& default_instance();
  
  void Swap(NetworkStatePack* other);
  
  // implements Message ----------------------------------------------
  
  NetworkStatePack* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NetworkStatePack& from);
  void MergeFrom(const NetworkStatePack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Models.NetworkStatePack)
 private:
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetworkStatePack_2eproto();
  friend void protobuf_AssignDesc_NetworkStatePack_2eproto();
  friend void protobuf_ShutdownFile_NetworkStatePack_2eproto();
  
  void InitAsDefaultInstance();
  static NetworkStatePack* default_instance_;
};
// -------------------------------------------------------------------

class NetworkStateReplyPack : public ::google::protobuf::MessageLite {
 public:
  NetworkStateReplyPack();
  virtual ~NetworkStateReplyPack();
  
  NetworkStateReplyPack(const NetworkStateReplyPack& from);
  
  inline NetworkStateReplyPack& operator=(const NetworkStateReplyPack& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const NetworkStateReplyPack& default_instance();
  
  void Swap(NetworkStateReplyPack* other);
  
  // implements Message ----------------------------------------------
  
  NetworkStateReplyPack* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NetworkStateReplyPack& from);
  void MergeFrom(const NetworkStateReplyPack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 clientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline ::google::protobuf::int32 clientid() const;
  inline void set_clientid(::google::protobuf::int32 value);
  
  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Models.NetworkStateReplyPack)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetworkStatePack_2eproto();
  friend void protobuf_AssignDesc_NetworkStatePack_2eproto();
  friend void protobuf_ShutdownFile_NetworkStatePack_2eproto();
  
  void InitAsDefaultInstance();
  static NetworkStateReplyPack* default_instance_;
};
// ===================================================================


// ===================================================================

// NetworkStatePack

// -------------------------------------------------------------------

// NetworkStateReplyPack

// optional int32 clientId = 1;
inline bool NetworkStateReplyPack::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkStateReplyPack::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkStateReplyPack::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkStateReplyPack::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 NetworkStateReplyPack::clientid() const {
  return clientid_;
}
inline void NetworkStateReplyPack::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
}

// optional int32 state = 2;
inline bool NetworkStateReplyPack::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkStateReplyPack::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkStateReplyPack::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkStateReplyPack::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 NetworkStateReplyPack::state() const {
  return state_;
}
inline void NetworkStateReplyPack::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetworkStatePack_2eproto__INCLUDED
