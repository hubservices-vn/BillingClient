// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScreenLockPack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Models {

void protobuf_ShutdownFile_ScreenLockPack_2eproto() {
  delete ScreenLockRequestPack::default_instance_;
  delete ScreenLockReplyPack::default_instance_;
  delete ScreenUnlockRequestPack::default_instance_;
  delete ScreenUnlockReplyPack::default_instance_;
}

void protobuf_AddDesc_ScreenLockPack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ScreenLockRequestPack::default_instance_ = new ScreenLockRequestPack();
  ScreenLockReplyPack::default_instance_ = new ScreenLockReplyPack();
  ScreenUnlockRequestPack::default_instance_ = new ScreenUnlockRequestPack();
  ScreenUnlockReplyPack::default_instance_ = new ScreenUnlockReplyPack();
  ScreenLockRequestPack::default_instance_->InitAsDefaultInstance();
  ScreenLockReplyPack::default_instance_->InitAsDefaultInstance();
  ScreenUnlockRequestPack::default_instance_->InitAsDefaultInstance();
  ScreenUnlockReplyPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScreenLockPack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScreenLockPack_2eproto {
  StaticDescriptorInitializer_ScreenLockPack_2eproto() {
    protobuf_AddDesc_ScreenLockPack_2eproto();
  }
} static_descriptor_initializer_ScreenLockPack_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ScreenLockRequestPack::kModeFieldNumber;
const int ScreenLockRequestPack::kPwdFieldNumber;
const int ScreenLockRequestPack::kAccNameFieldNumber;
const int ScreenLockRequestPack::kAccPwdRawFieldNumber;
#endif  // !_MSC_VER

ScreenLockRequestPack::ScreenLockRequestPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScreenLockRequestPack::InitAsDefaultInstance() {
}

ScreenLockRequestPack::ScreenLockRequestPack(const ScreenLockRequestPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenLockRequestPack::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_pwd_raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenLockRequestPack::~ScreenLockRequestPack() {
  SharedDtor();
}

void ScreenLockRequestPack::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (acc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_name_;
  }
  if (acc_pwd_raw_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_pwd_raw_;
  }
  if (this != default_instance_) {
  }
}

void ScreenLockRequestPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenLockRequestPack& ScreenLockRequestPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScreenLockPack_2eproto();  return *default_instance_;
}

ScreenLockRequestPack* ScreenLockRequestPack::default_instance_ = NULL;

ScreenLockRequestPack* ScreenLockRequestPack::New() const {
  return new ScreenLockRequestPack;
}

void ScreenLockRequestPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_acc_name()) {
      if (acc_name_ != &::google::protobuf::internal::kEmptyString) {
        acc_name_->clear();
      }
    }
    if (has_acc_pwd_raw()) {
      if (acc_pwd_raw_ != &::google::protobuf::internal::kEmptyString) {
        acc_pwd_raw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScreenLockRequestPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acc_name;
        break;
      }
      
      // optional string acc_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acc_pwd_raw;
        break;
      }
      
      // optional string acc_pwd_raw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_pwd_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_pwd_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenLockRequestPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  // optional string acc_name = 3;
  if (has_acc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->acc_name(), output);
  }
  
  // optional string acc_pwd_raw = 4;
  if (has_acc_pwd_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->acc_pwd_raw(), output);
  }
  
}

int ScreenLockRequestPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional string acc_name = 3;
    if (has_acc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_name());
    }
    
    // optional string acc_pwd_raw = 4;
    if (has_acc_pwd_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_pwd_raw());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenLockRequestPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenLockRequestPack*>(&from));
}

void ScreenLockRequestPack::MergeFrom(const ScreenLockRequestPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_acc_name()) {
      set_acc_name(from.acc_name());
    }
    if (from.has_acc_pwd_raw()) {
      set_acc_pwd_raw(from.acc_pwd_raw());
    }
  }
}

void ScreenLockRequestPack::CopyFrom(const ScreenLockRequestPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenLockRequestPack::IsInitialized() const {
  
  return true;
}

void ScreenLockRequestPack::Swap(ScreenLockRequestPack* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(pwd_, other->pwd_);
    std::swap(acc_name_, other->acc_name_);
    std::swap(acc_pwd_raw_, other->acc_pwd_raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScreenLockRequestPack::GetTypeName() const {
  return "Models.ScreenLockRequestPack";
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenLockReplyPack::kModeFieldNumber;
const int ScreenLockReplyPack::kResultFieldNumber;
#endif  // !_MSC_VER

ScreenLockReplyPack::ScreenLockReplyPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScreenLockReplyPack::InitAsDefaultInstance() {
}

ScreenLockReplyPack::ScreenLockReplyPack(const ScreenLockReplyPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenLockReplyPack::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenLockReplyPack::~ScreenLockReplyPack() {
  SharedDtor();
}

void ScreenLockReplyPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScreenLockReplyPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenLockReplyPack& ScreenLockReplyPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScreenLockPack_2eproto();  return *default_instance_;
}

ScreenLockReplyPack* ScreenLockReplyPack::default_instance_ = NULL;

ScreenLockReplyPack* ScreenLockReplyPack::New() const {
  return new ScreenLockReplyPack;
}

void ScreenLockReplyPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScreenLockReplyPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenLockReplyPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
}

int ScreenLockReplyPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenLockReplyPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenLockReplyPack*>(&from));
}

void ScreenLockReplyPack::MergeFrom(const ScreenLockReplyPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ScreenLockReplyPack::CopyFrom(const ScreenLockReplyPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenLockReplyPack::IsInitialized() const {
  
  return true;
}

void ScreenLockReplyPack::Swap(ScreenLockReplyPack* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScreenLockReplyPack::GetTypeName() const {
  return "Models.ScreenLockReplyPack";
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenUnlockRequestPack::kModeFieldNumber;
const int ScreenUnlockRequestPack::kPwdFieldNumber;
const int ScreenUnlockRequestPack::kAccNameFieldNumber;
const int ScreenUnlockRequestPack::kAccPwdRawFieldNumber;
#endif  // !_MSC_VER

ScreenUnlockRequestPack::ScreenUnlockRequestPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScreenUnlockRequestPack::InitAsDefaultInstance() {
}

ScreenUnlockRequestPack::ScreenUnlockRequestPack(const ScreenUnlockRequestPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenUnlockRequestPack::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_pwd_raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenUnlockRequestPack::~ScreenUnlockRequestPack() {
  SharedDtor();
}

void ScreenUnlockRequestPack::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (acc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_name_;
  }
  if (acc_pwd_raw_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_pwd_raw_;
  }
  if (this != default_instance_) {
  }
}

void ScreenUnlockRequestPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenUnlockRequestPack& ScreenUnlockRequestPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScreenLockPack_2eproto();  return *default_instance_;
}

ScreenUnlockRequestPack* ScreenUnlockRequestPack::default_instance_ = NULL;

ScreenUnlockRequestPack* ScreenUnlockRequestPack::New() const {
  return new ScreenUnlockRequestPack;
}

void ScreenUnlockRequestPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_acc_name()) {
      if (acc_name_ != &::google::protobuf::internal::kEmptyString) {
        acc_name_->clear();
      }
    }
    if (has_acc_pwd_raw()) {
      if (acc_pwd_raw_ != &::google::protobuf::internal::kEmptyString) {
        acc_pwd_raw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScreenUnlockRequestPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acc_name;
        break;
      }
      
      // optional string acc_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acc_pwd_raw;
        break;
      }
      
      // optional string acc_pwd_raw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_pwd_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_pwd_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenUnlockRequestPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  // optional string acc_name = 3;
  if (has_acc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->acc_name(), output);
  }
  
  // optional string acc_pwd_raw = 4;
  if (has_acc_pwd_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->acc_pwd_raw(), output);
  }
  
}

int ScreenUnlockRequestPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional string acc_name = 3;
    if (has_acc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_name());
    }
    
    // optional string acc_pwd_raw = 4;
    if (has_acc_pwd_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_pwd_raw());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenUnlockRequestPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenUnlockRequestPack*>(&from));
}

void ScreenUnlockRequestPack::MergeFrom(const ScreenUnlockRequestPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_acc_name()) {
      set_acc_name(from.acc_name());
    }
    if (from.has_acc_pwd_raw()) {
      set_acc_pwd_raw(from.acc_pwd_raw());
    }
  }
}

void ScreenUnlockRequestPack::CopyFrom(const ScreenUnlockRequestPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenUnlockRequestPack::IsInitialized() const {
  
  return true;
}

void ScreenUnlockRequestPack::Swap(ScreenUnlockRequestPack* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(pwd_, other->pwd_);
    std::swap(acc_name_, other->acc_name_);
    std::swap(acc_pwd_raw_, other->acc_pwd_raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScreenUnlockRequestPack::GetTypeName() const {
  return "Models.ScreenUnlockRequestPack";
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenUnlockReplyPack::kModeFieldNumber;
const int ScreenUnlockReplyPack::kResultFieldNumber;
#endif  // !_MSC_VER

ScreenUnlockReplyPack::ScreenUnlockReplyPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScreenUnlockReplyPack::InitAsDefaultInstance() {
}

ScreenUnlockReplyPack::ScreenUnlockReplyPack(const ScreenUnlockReplyPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenUnlockReplyPack::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenUnlockReplyPack::~ScreenUnlockReplyPack() {
  SharedDtor();
}

void ScreenUnlockReplyPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScreenUnlockReplyPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenUnlockReplyPack& ScreenUnlockReplyPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScreenLockPack_2eproto();  return *default_instance_;
}

ScreenUnlockReplyPack* ScreenUnlockReplyPack::default_instance_ = NULL;

ScreenUnlockReplyPack* ScreenUnlockReplyPack::New() const {
  return new ScreenUnlockReplyPack;
}

void ScreenUnlockReplyPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScreenUnlockReplyPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenUnlockReplyPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
}

int ScreenUnlockReplyPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenUnlockReplyPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenUnlockReplyPack*>(&from));
}

void ScreenUnlockReplyPack::MergeFrom(const ScreenUnlockReplyPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ScreenUnlockReplyPack::CopyFrom(const ScreenUnlockReplyPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenUnlockReplyPack::IsInitialized() const {
  
  return true;
}

void ScreenUnlockReplyPack::Swap(ScreenUnlockReplyPack* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScreenUnlockReplyPack::GetTypeName() const {
  return "Models.ScreenUnlockReplyPack";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models

// @@protoc_insertion_point(global_scope)
