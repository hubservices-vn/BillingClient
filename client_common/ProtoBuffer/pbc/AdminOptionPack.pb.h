// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdminOptionPack.proto

#ifndef PROTOBUF_AdminOptionPack_2eproto__INCLUDED
#define PROTOBUF_AdminOptionPack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Models {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdminOptionPack_2eproto();
void protobuf_AssignDesc_AdminOptionPack_2eproto();
void protobuf_ShutdownFile_AdminOptionPack_2eproto();

class AdminOptionRequestPack;
class AdminOptionReplyPack;

// ===================================================================

class AdminOptionRequestPack : public ::google::protobuf::MessageLite {
 public:
  AdminOptionRequestPack();
  virtual ~AdminOptionRequestPack();
  
  AdminOptionRequestPack(const AdminOptionRequestPack& from);
  
  inline AdminOptionRequestPack& operator=(const AdminOptionRequestPack& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AdminOptionRequestPack& default_instance();
  
  void Swap(AdminOptionRequestPack* other);
  
  // implements Message ----------------------------------------------
  
  AdminOptionRequestPack* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdminOptionRequestPack& from);
  void MergeFrom(const AdminOptionRequestPack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 clientId = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  inline ::google::protobuf::int32 clientid() const;
  inline void set_clientid(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string server_address = 3;
  inline bool has_server_address() const;
  inline void clear_server_address();
  static const int kServerAddressFieldNumber = 3;
  inline const ::std::string& server_address() const;
  inline void set_server_address(const ::std::string& value);
  inline void set_server_address(const char* value);
  inline void set_server_address(const char* value, size_t size);
  inline ::std::string* mutable_server_address();
  inline ::std::string* release_server_address();
  
  // optional string new_admin_name = 4;
  inline bool has_new_admin_name() const;
  inline void clear_new_admin_name();
  static const int kNewAdminNameFieldNumber = 4;
  inline const ::std::string& new_admin_name() const;
  inline void set_new_admin_name(const ::std::string& value);
  inline void set_new_admin_name(const char* value);
  inline void set_new_admin_name(const char* value, size_t size);
  inline ::std::string* mutable_new_admin_name();
  inline ::std::string* release_new_admin_name();
  
  // optional string old_admin_pwd_enc = 5;
  inline bool has_old_admin_pwd_enc() const;
  inline void clear_old_admin_pwd_enc();
  static const int kOldAdminPwdEncFieldNumber = 5;
  inline const ::std::string& old_admin_pwd_enc() const;
  inline void set_old_admin_pwd_enc(const ::std::string& value);
  inline void set_old_admin_pwd_enc(const char* value);
  inline void set_old_admin_pwd_enc(const char* value, size_t size);
  inline ::std::string* mutable_old_admin_pwd_enc();
  inline ::std::string* release_old_admin_pwd_enc();
  
  // optional string new_admin_pwd_enc = 6;
  inline bool has_new_admin_pwd_enc() const;
  inline void clear_new_admin_pwd_enc();
  static const int kNewAdminPwdEncFieldNumber = 6;
  inline const ::std::string& new_admin_pwd_enc() const;
  inline void set_new_admin_pwd_enc(const ::std::string& value);
  inline void set_new_admin_pwd_enc(const char* value);
  inline void set_new_admin_pwd_enc(const char* value, size_t size);
  inline ::std::string* mutable_new_admin_pwd_enc();
  inline ::std::string* release_new_admin_pwd_enc();
  
  // @@protoc_insertion_point(class_scope:Models.AdminOptionRequestPack)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_server_address();
  inline void clear_has_server_address();
  inline void set_has_new_admin_name();
  inline void clear_has_new_admin_name();
  inline void set_has_old_admin_pwd_enc();
  inline void clear_has_old_admin_pwd_enc();
  inline void set_has_new_admin_pwd_enc();
  inline void clear_has_new_admin_pwd_enc();
  
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::int32 type_;
  ::std::string* server_address_;
  ::std::string* new_admin_name_;
  ::std::string* old_admin_pwd_enc_;
  ::std::string* new_admin_pwd_enc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdminOptionPack_2eproto();
  friend void protobuf_AssignDesc_AdminOptionPack_2eproto();
  friend void protobuf_ShutdownFile_AdminOptionPack_2eproto();
  
  void InitAsDefaultInstance();
  static AdminOptionRequestPack* default_instance_;
};
// -------------------------------------------------------------------

class AdminOptionReplyPack : public ::google::protobuf::MessageLite {
 public:
  AdminOptionReplyPack();
  virtual ~AdminOptionReplyPack();
  
  AdminOptionReplyPack(const AdminOptionReplyPack& from);
  
  inline AdminOptionReplyPack& operator=(const AdminOptionReplyPack& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AdminOptionReplyPack& default_instance();
  
  void Swap(AdminOptionReplyPack* other);
  
  // implements Message ----------------------------------------------
  
  AdminOptionReplyPack* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdminOptionReplyPack& from);
  void MergeFrom(const AdminOptionReplyPack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string server_address = 3;
  inline bool has_server_address() const;
  inline void clear_server_address();
  static const int kServerAddressFieldNumber = 3;
  inline const ::std::string& server_address() const;
  inline void set_server_address(const ::std::string& value);
  inline void set_server_address(const char* value);
  inline void set_server_address(const char* value, size_t size);
  inline ::std::string* mutable_server_address();
  inline ::std::string* release_server_address();
  
  // optional string new_admin_name = 4;
  inline bool has_new_admin_name() const;
  inline void clear_new_admin_name();
  static const int kNewAdminNameFieldNumber = 4;
  inline const ::std::string& new_admin_name() const;
  inline void set_new_admin_name(const ::std::string& value);
  inline void set_new_admin_name(const char* value);
  inline void set_new_admin_name(const char* value, size_t size);
  inline ::std::string* mutable_new_admin_name();
  inline ::std::string* release_new_admin_name();
  
  // @@protoc_insertion_point(class_scope:Models.AdminOptionReplyPack)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_address();
  inline void clear_has_server_address();
  inline void set_has_new_admin_name();
  inline void clear_has_new_admin_name();
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 result_;
  ::std::string* server_address_;
  ::std::string* new_admin_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AdminOptionPack_2eproto();
  friend void protobuf_AssignDesc_AdminOptionPack_2eproto();
  friend void protobuf_ShutdownFile_AdminOptionPack_2eproto();
  
  void InitAsDefaultInstance();
  static AdminOptionReplyPack* default_instance_;
};
// ===================================================================


// ===================================================================

// AdminOptionRequestPack

// optional int32 clientId = 1;
inline bool AdminOptionRequestPack::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminOptionRequestPack::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminOptionRequestPack::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminOptionRequestPack::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 AdminOptionRequestPack::clientid() const {
  return clientid_;
}
inline void AdminOptionRequestPack::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
}

// optional int32 type = 2;
inline bool AdminOptionRequestPack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminOptionRequestPack::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminOptionRequestPack::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminOptionRequestPack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AdminOptionRequestPack::type() const {
  return type_;
}
inline void AdminOptionRequestPack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string server_address = 3;
inline bool AdminOptionRequestPack::has_server_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminOptionRequestPack::set_has_server_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminOptionRequestPack::clear_has_server_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminOptionRequestPack::clear_server_address() {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    server_address_->clear();
  }
  clear_has_server_address();
}
inline const ::std::string& AdminOptionRequestPack::server_address() const {
  return *server_address_;
}
inline void AdminOptionRequestPack::set_server_address(const ::std::string& value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void AdminOptionRequestPack::set_server_address(const char* value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void AdminOptionRequestPack::set_server_address(const char* value, size_t size) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdminOptionRequestPack::mutable_server_address() {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  return server_address_;
}
inline ::std::string* AdminOptionRequestPack::release_server_address() {
  clear_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_address_;
    server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string new_admin_name = 4;
inline bool AdminOptionRequestPack::has_new_admin_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdminOptionRequestPack::set_has_new_admin_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdminOptionRequestPack::clear_has_new_admin_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdminOptionRequestPack::clear_new_admin_name() {
  if (new_admin_name_ != &::google::protobuf::internal::kEmptyString) {
    new_admin_name_->clear();
  }
  clear_has_new_admin_name();
}
inline const ::std::string& AdminOptionRequestPack::new_admin_name() const {
  return *new_admin_name_;
}
inline void AdminOptionRequestPack::set_new_admin_name(const ::std::string& value) {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  new_admin_name_->assign(value);
}
inline void AdminOptionRequestPack::set_new_admin_name(const char* value) {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  new_admin_name_->assign(value);
}
inline void AdminOptionRequestPack::set_new_admin_name(const char* value, size_t size) {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  new_admin_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdminOptionRequestPack::mutable_new_admin_name() {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  return new_admin_name_;
}
inline ::std::string* AdminOptionRequestPack::release_new_admin_name() {
  clear_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_admin_name_;
    new_admin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string old_admin_pwd_enc = 5;
inline bool AdminOptionRequestPack::has_old_admin_pwd_enc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdminOptionRequestPack::set_has_old_admin_pwd_enc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdminOptionRequestPack::clear_has_old_admin_pwd_enc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdminOptionRequestPack::clear_old_admin_pwd_enc() {
  if (old_admin_pwd_enc_ != &::google::protobuf::internal::kEmptyString) {
    old_admin_pwd_enc_->clear();
  }
  clear_has_old_admin_pwd_enc();
}
inline const ::std::string& AdminOptionRequestPack::old_admin_pwd_enc() const {
  return *old_admin_pwd_enc_;
}
inline void AdminOptionRequestPack::set_old_admin_pwd_enc(const ::std::string& value) {
  set_has_old_admin_pwd_enc();
  if (old_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    old_admin_pwd_enc_ = new ::std::string;
  }
  old_admin_pwd_enc_->assign(value);
}
inline void AdminOptionRequestPack::set_old_admin_pwd_enc(const char* value) {
  set_has_old_admin_pwd_enc();
  if (old_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    old_admin_pwd_enc_ = new ::std::string;
  }
  old_admin_pwd_enc_->assign(value);
}
inline void AdminOptionRequestPack::set_old_admin_pwd_enc(const char* value, size_t size) {
  set_has_old_admin_pwd_enc();
  if (old_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    old_admin_pwd_enc_ = new ::std::string;
  }
  old_admin_pwd_enc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdminOptionRequestPack::mutable_old_admin_pwd_enc() {
  set_has_old_admin_pwd_enc();
  if (old_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    old_admin_pwd_enc_ = new ::std::string;
  }
  return old_admin_pwd_enc_;
}
inline ::std::string* AdminOptionRequestPack::release_old_admin_pwd_enc() {
  clear_has_old_admin_pwd_enc();
  if (old_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_admin_pwd_enc_;
    old_admin_pwd_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string new_admin_pwd_enc = 6;
inline bool AdminOptionRequestPack::has_new_admin_pwd_enc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdminOptionRequestPack::set_has_new_admin_pwd_enc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdminOptionRequestPack::clear_has_new_admin_pwd_enc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdminOptionRequestPack::clear_new_admin_pwd_enc() {
  if (new_admin_pwd_enc_ != &::google::protobuf::internal::kEmptyString) {
    new_admin_pwd_enc_->clear();
  }
  clear_has_new_admin_pwd_enc();
}
inline const ::std::string& AdminOptionRequestPack::new_admin_pwd_enc() const {
  return *new_admin_pwd_enc_;
}
inline void AdminOptionRequestPack::set_new_admin_pwd_enc(const ::std::string& value) {
  set_has_new_admin_pwd_enc();
  if (new_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_pwd_enc_ = new ::std::string;
  }
  new_admin_pwd_enc_->assign(value);
}
inline void AdminOptionRequestPack::set_new_admin_pwd_enc(const char* value) {
  set_has_new_admin_pwd_enc();
  if (new_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_pwd_enc_ = new ::std::string;
  }
  new_admin_pwd_enc_->assign(value);
}
inline void AdminOptionRequestPack::set_new_admin_pwd_enc(const char* value, size_t size) {
  set_has_new_admin_pwd_enc();
  if (new_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_pwd_enc_ = new ::std::string;
  }
  new_admin_pwd_enc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdminOptionRequestPack::mutable_new_admin_pwd_enc() {
  set_has_new_admin_pwd_enc();
  if (new_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_pwd_enc_ = new ::std::string;
  }
  return new_admin_pwd_enc_;
}
inline ::std::string* AdminOptionRequestPack::release_new_admin_pwd_enc() {
  clear_has_new_admin_pwd_enc();
  if (new_admin_pwd_enc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_admin_pwd_enc_;
    new_admin_pwd_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AdminOptionReplyPack

// optional int32 type = 1;
inline bool AdminOptionReplyPack::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminOptionReplyPack::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminOptionReplyPack::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminOptionReplyPack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AdminOptionReplyPack::type() const {
  return type_;
}
inline void AdminOptionReplyPack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 result = 2;
inline bool AdminOptionReplyPack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminOptionReplyPack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminOptionReplyPack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminOptionReplyPack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AdminOptionReplyPack::result() const {
  return result_;
}
inline void AdminOptionReplyPack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string server_address = 3;
inline bool AdminOptionReplyPack::has_server_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminOptionReplyPack::set_has_server_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminOptionReplyPack::clear_has_server_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminOptionReplyPack::clear_server_address() {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    server_address_->clear();
  }
  clear_has_server_address();
}
inline const ::std::string& AdminOptionReplyPack::server_address() const {
  return *server_address_;
}
inline void AdminOptionReplyPack::set_server_address(const ::std::string& value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void AdminOptionReplyPack::set_server_address(const char* value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void AdminOptionReplyPack::set_server_address(const char* value, size_t size) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdminOptionReplyPack::mutable_server_address() {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  return server_address_;
}
inline ::std::string* AdminOptionReplyPack::release_server_address() {
  clear_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_address_;
    server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string new_admin_name = 4;
inline bool AdminOptionReplyPack::has_new_admin_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdminOptionReplyPack::set_has_new_admin_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdminOptionReplyPack::clear_has_new_admin_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdminOptionReplyPack::clear_new_admin_name() {
  if (new_admin_name_ != &::google::protobuf::internal::kEmptyString) {
    new_admin_name_->clear();
  }
  clear_has_new_admin_name();
}
inline const ::std::string& AdminOptionReplyPack::new_admin_name() const {
  return *new_admin_name_;
}
inline void AdminOptionReplyPack::set_new_admin_name(const ::std::string& value) {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  new_admin_name_->assign(value);
}
inline void AdminOptionReplyPack::set_new_admin_name(const char* value) {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  new_admin_name_->assign(value);
}
inline void AdminOptionReplyPack::set_new_admin_name(const char* value, size_t size) {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  new_admin_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdminOptionReplyPack::mutable_new_admin_name() {
  set_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    new_admin_name_ = new ::std::string;
  }
  return new_admin_name_;
}
inline ::std::string* AdminOptionReplyPack::release_new_admin_name() {
  clear_has_new_admin_name();
  if (new_admin_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_admin_name_;
    new_admin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdminOptionPack_2eproto__INCLUDED
