// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetworkStatePack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Models {

void protobuf_ShutdownFile_NetworkStatePack_2eproto() {
  delete NetworkStatePack::default_instance_;
  delete NetworkStateReplyPack::default_instance_;
}

void protobuf_AddDesc_NetworkStatePack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  NetworkStatePack::default_instance_ = new NetworkStatePack();
  NetworkStateReplyPack::default_instance_ = new NetworkStateReplyPack();
  NetworkStatePack::default_instance_->InitAsDefaultInstance();
  NetworkStateReplyPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetworkStatePack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetworkStatePack_2eproto {
  StaticDescriptorInitializer_NetworkStatePack_2eproto() {
    protobuf_AddDesc_NetworkStatePack_2eproto();
  }
} static_descriptor_initializer_NetworkStatePack_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NetworkStatePack::NetworkStatePack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NetworkStatePack::InitAsDefaultInstance() {
}

NetworkStatePack::NetworkStatePack(const NetworkStatePack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkStatePack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkStatePack::~NetworkStatePack() {
  SharedDtor();
}

void NetworkStatePack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkStatePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkStatePack& NetworkStatePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkStatePack_2eproto();  return *default_instance_;
}

NetworkStatePack* NetworkStatePack::default_instance_ = NULL;

NetworkStatePack* NetworkStatePack::New() const {
  return new NetworkStatePack;
}

void NetworkStatePack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NetworkStatePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void NetworkStatePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int NetworkStatePack::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkStatePack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkStatePack*>(&from));
}

void NetworkStatePack::MergeFrom(const NetworkStatePack& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void NetworkStatePack::CopyFrom(const NetworkStatePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatePack::IsInitialized() const {
  
  return true;
}

void NetworkStatePack::Swap(NetworkStatePack* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetworkStatePack::GetTypeName() const {
  return "Models.NetworkStatePack";
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkStateReplyPack::kClientIdFieldNumber;
const int NetworkStateReplyPack::kStateFieldNumber;
#endif  // !_MSC_VER

NetworkStateReplyPack::NetworkStateReplyPack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NetworkStateReplyPack::InitAsDefaultInstance() {
}

NetworkStateReplyPack::NetworkStateReplyPack(const NetworkStateReplyPack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkStateReplyPack::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkStateReplyPack::~NetworkStateReplyPack() {
  SharedDtor();
}

void NetworkStateReplyPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkStateReplyPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkStateReplyPack& NetworkStateReplyPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkStatePack_2eproto();  return *default_instance_;
}

NetworkStateReplyPack* NetworkStateReplyPack::default_instance_ = NULL;

NetworkStateReplyPack* NetworkStateReplyPack::New() const {
  return new NetworkStateReplyPack;
}

void NetworkStateReplyPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NetworkStateReplyPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkStateReplyPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientid(), output);
  }
  
  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }
  
}

int NetworkStateReplyPack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }
    
    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkStateReplyPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkStateReplyPack*>(&from));
}

void NetworkStateReplyPack::MergeFrom(const NetworkStateReplyPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void NetworkStateReplyPack::CopyFrom(const NetworkStateReplyPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStateReplyPack::IsInitialized() const {
  
  return true;
}

void NetworkStateReplyPack::Swap(NetworkStateReplyPack* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetworkStateReplyPack::GetTypeName() const {
  return "Models.NetworkStateReplyPack";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models

// @@protoc_insertion_point(global_scope)
